---
name: WebApp deployment using Terraform.
on:
  push:
    branches:
      - main
  #pull_request:
    #branches:
      #- main
env:
  # Setting verbosity of Terraform logs.
  TF_LOG: ERROR
  # Setting AWS Access Key Id and Secret Access Key.
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
jobs:
  terraform:
    name: Running Terraform
    # GitHub Actions runner is ubuntu-22.04.
    runs-on: ubuntu-22.04
    # Environment is Development.
    environment: dev
    defaults:
      run:
        # Using bash shell.
        shell: bash
        # Setting working directory.
        # Also, keeping Terraform files in the terraform directory.
        working-directory: .
    steps:
      # Checkout the repository to the GitHub Actions runner.
      - name: Git Checkout
        uses: actions/checkout@v3
      # Official Github Action to run Liquibase in your pipeline.
      #- name: Liquibase Pipeline.
        #uses: liquibase/liquibase-github-action@v3
        #with:
          #operation: 'update'
          #classpath: './postgresql/webappdb/public'
          #changeLogFile: '2022.01.31.ChangeLog.sql'
          #username: ${{ secrets.DB_USERNAME }}
          #password: ${{ secrets.DB_PASSWORD }}
          #url: ${{ secrets.DB_URL }}
      # Preparing and pushing documetation into README.md
      #- name: Prepare Terraform Doc and Push to README.md
        #uses: terraform-docs/gh-actions@main
        #with:
          #working-dir: .
          #output-file: README.md
          #output-method: inject
          #git-push: "true"
      # Installing the specified version of Terraform CLI on Runner.
      - name: Terraform setup
        uses: hashicorp/setup-terraform@v2
        with:
          #cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: 1.4.0
          #terraform_wrapper: false
      # Initialize a new or existing Terraform working directory by creating initial files,
      # loading any remote state, downloading modules, etc.
      - name: Terraform initialization.
        run: terraform init -input=false -reconfigure && terraform de
        #shell: bash
        env:
          TF_WORKSPACE: default
      # Format Terraform configuration files adhere in to a canonical format.
      - name: Terraform files formating.
        run: terraform fmt
      # Check that all Terraform configuration files adhere to a canonical format.
      - name: Terraform file format checking.
        run: terraform fmt -check
      # Validate all Terraform configuration files.
      - name: Terraform files validating.
        run: terraform validate -no-color
      # Generates an execution plan for Terraform.
      #- name: Terraform plan generation.
        #run: terraform plan -input=false -out=webapp.tfplan
        #continue-on-error: true
      # Apply an execution plan for Terraform.
      #- name: Terraform plan applying.
        #run: terraform apply -auto-approve -input=false webapp.tfplan
      # Apply an execution plan for Terraform.
      - name: Terraform plan applying.
        run: terraform apply -destroy
