---
name: Create Lambda Function using Terraform
on:
  push:
    branches:
      - main
jobs:
  terraform:
    name: Running Terraform.
    runs-on: ubuntu-latest
    environment: Development
    # Use the Bash shell regardless whether
    # the GitHub Actions runner is ubuntu-latest.
    defaults:
      run:
        shell: bash
    steps:
      # Checkout the repository to the GitHub Actions runner.
      - name: Git Checkout.
        uses: actions/checkout@v2

      # Preparing and pushing documetation into README.md
      #- name: Prepare Terraform Doc and Push to README.md
        #uses: terraform-docs/gh-actions@main
        #with:
          #working-dir: .
          #output-file: README.md
          #output-method: inject
          #git-push: "true"

      # Install the latest version of Terraform CLI,
      # and configure the Terraform CLI configuration file
      # with a Terraform Cloud user API token.
      - name: Setup Terraform.
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files,
      # loading any remote state, downloading modules, etc.
      - name: Initialize Terraform.
        run: terraform init -input=false
        #env:
          #TF_WORKSPACE: default

      # Format Terraform configuration files adhere in to a canonical format.
      - name: Format Terraform Files.
        run: terraform fmt

      # Check that all Terraform configuration files adhere to a canonical format.
      - name: Check Terraform Files Format.
        run: terraform fmt -check

      # Validate all Terraform configuration files.
      - name: Validate Terraform Files.
        run: terraform validate -no-color

      # Generates an execution plan for Terraform.
      - name: Generate Terraform Plan.
        run: terraform plan -no-color
        #continue-on-error: true

      # On push to main, build or change infrastructure according to Terraform configuration files.
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud".
      # Apply Terraform Plan.
      - name: Apply Terraform Plan.
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -input=false -auto-approve

      # Output of Terraform .
      #- name: Output of Terraform.
        #run: terraform output