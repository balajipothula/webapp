---
name: WebApp deployment using Terraform.
on:
  push:
    branches:
      - main
  #pull_request:
    #branches:
      #- main
env:
  # Setting verbosity of Terraform logs.
  TF_LOG: ERROR
  # Setting AWS Access Key Id and Secret Access Key.
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
jobs:
  terraform:
    name: Running Terraform
    # GitHub Actions runner is ubuntu-22.04.
    runs-on: ubuntu-22.04
    # Environment is Development.
    environment: dev
    defaults:
      run:
        # Using bash shell.
        shell: bash
        # Setting working directory.
        # Also, by keeping '.' setting current terraform files running directory.
        working-directory: .
    steps:
      # Checkout the repository to the GitHub Actions runner.
      - name: Git Checkout
        uses: actions/checkout@v3
      # Gets the public IPv4 and IPv6 addreses of the current runner using latest Node
      - name: Get Runner Public IP Address
        uses: candidob/get-runner-ip@v1.0.0
        id: ip
      # Preparing and pushing documetation into README.md
      #- name: Prepare Terraform Doc and Push to README.md
        #uses: terraform-docs/gh-actions@main
        #with:
          #working-dir: .
          #output-file: README.md
          #output-method: inject
          #git-push: "true"
      # Installing the specified version of Terraform CLI on Runner.
      - name: Terraform setup
        uses: hashicorp/setup-terraform@v2
        with:
          #cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: 1.4.0
          #terraform_wrapper: false
      # Initialize a new or existing Terraform working directory by creating initial files,
      # loading any remote state, downloading modules, etc.
      - name: Terraform initialization.
        run: terraform init -input=false -reconfigure
        #shell: bash
        env:
          TF_WORKSPACE: default
      # Format Terraform configuration files adhere in to a canonical format.
      - name: Terraform files formating.
        run: terraform fmt
      # Check that all Terraform configuration files adhere to a canonical format.
      - name: Terraform file format checking.
        run: terraform fmt -check
      # Validate all Terraform configuration files.
      - name: Terraform files validating.
        run: terraform validate -no-color
      # Generates an execution plan for Terraform.
      - name: Terraform plan generation.
        run: |
          terraform plan -input=false -out=webapp.tfplan                              \
            -var="github_hosted_runner_ip=${{ steps.ip.outputs.ipv4 }}/32"            \
            -var="webapp_database_name=${{ secrets.WEBAPP_DB_NAME }}"                 \
            -var="webapp_db_master_username=${{ secrets.WEBAPP_DB_MASTER_USERNAME }}" \
            -var="webapp_db_master_password=${{ secrets.WEBAPP_DB_MASTER_PASSWORD }}"
        #continue-on-error: true
      # Apply an execution plan for Terraform.
      - name: Terraform plan applying.
        run: terraform apply -auto-approve -input=false webapp.tfplan
      # Destroy an execution plan for Terraform.
      #- name: Terraform plan destroying.
        #run: |
          #terraform apply -auto-approve -input=false -destroy                         \
            #-var="github_hosted_runner_ip=${{ steps.ip.outputs.ipv4 }}/32"            \
            #-var="webapp_database_name=${{ secrets.WEBAPP_DB_NAME }}"                 \
            #-var="webapp_db_master_username=${{ secrets.WEBAPP_DB_MASTER_USERNAME }}" \
            #-var="webapp_db_master_password=${{ secrets.WEBAPP_DB_MASTER_PASSWORD }}"
      # Deploy any changes in the changelog file that have not been deployed
      - name: Liquibase Update Action
        uses: liquibase-github-actions/update@v4.32.0
        with:
          # The root changelog.
          changelogFile: "./postgresql/webapp_db/public/master.xml"
          # The JDBC database connection URL.
          url: "jdbc:postgresql://${{ secrets.WEBAPP_DB_MASTER_URL }}:5432/${{ secrets.WEBAPP_DB_NAME }}"
          # The default schema name to use for the database connection.
          defaultSchemaName: "public"
          # The JDBC driver class
          driver: "org.postgresql.Driver"
          # Password to use to connect to the database.
          password: ${{ secrets.WEBAPP_DB_MASTER_PASSWORD }}
          # Rollback all changesets if any fails.
          rollbackOnError: true
          # Type of update results summary to show.
          # Values can be "off", "summary", or "verbose".
          showSummary: "summary"
          # Summary output to report update summary results.
          # Values can be "log", "console", or "all".
          showSummaryOutput: "console"
          # Username to use to connect to the database.
          username: ${{ secrets.WEBAPP_DB_MASTER_USERNAME }}
          # Additional classpath entries to use.
          classpath: "./postgresql/webapp_db/public"
      - name: Terraform plan generation.
        run: |
          terraform plan -input=false -out=webapp.tfplan \
            -var="github_hosted_runner_ip=127.0.0.1/32"
      - name: Terraform plan apply `github_hosted_runner_to_webapp_db_sg` module.
        run: terraform apply -auto-approve -input=false -target=module.github_hosted_runner_to_webapp_db_sg.aws_security_group.generic
