name: '🚀 CD • Terraform • Infra Provision'
description: 'Continuous delivery action to provision AWS infrastructure using Terraform v1.4.0.'

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        default: 'dev'
        description: 'Select deployment environment'
        options: ['dev', 'qa', 'prod']
        required: true
      launch-aws-resources:
        type: boolean
        default: false
        description: 'Launch AWS resources'
        required: true
      apply-database-changes:
        type: boolean
        default: false
        description: 'Apply Database changes'
        required: true

env:
  # Setting verbosity of Terraform logs.
  TF_LOG: ERROR
  # Setting AWS Access Key Id and Secret Access Key.
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  terraform_infra_provision:
    name: 🏗️ Terraform Infra Provision
    # GitHub Actions runner is ubuntu-22.04.
    runs-on: ubuntu-22.04
    environment: ${{ github.ref }}
    defaults:
      run:
        shell: bash
    steps:
      # Checkout a Git repository at a particular version.
      - name: Step - Checkout ᵛ³
        uses: actions/checkout@v3
      # Gets the public IPv4 and IPv6 addreses of the current runner.
      - name: Step - Get Runner Public IP Address ᵛ¹·⁰·⁰
        id: step_candidob_get-runner-ip_v1-0-0
        uses: ./.github/actions/candidob_get-runner-ip_v1-0-0
      # Installing the specified version of Terraform CLI on Runner.
      - name: Step - Terraform v1.4.0 setup ᵛ²
        uses: ./.github/actions/hashicorp_setup-terraform_v2
        with:
          cli_config_credentials_hostname: null
          terraform_version: 1.4.0
      # Initialize a new or existing Terraform working directory by creating initial files,
      # loading any remote state, downloading modules, etc.
      - name: Step - Terraform initialization 🔁
        run: terraform init -input=false -reconfigure
        env:
          TF_WORKSPACE: default
      # Format Terraform configuration files adhere in to a canonical format.
      - name: Step - Terraform files formating 🧹
        run: terraform fmt
      # Check that all Terraform configuration files adhere to a canonical format.
      - name: Step - Terraform files format checking 🔍
        run: terraform fmt -check
      # Validate all Terraform configuration files.
      - name: Step - Terraform files validating ✅
        run: terraform validate -no-color
      # Generates an execution plan for Terraform.
      - name: Step - Terraform plan generation 📄
        if: ${{ inputs.launch-aws-resources }}
        run: |
          terraform plan -input=false -out=webapp.tfplan \
            -var="github_runner_ip=${{ steps.step_candidob_get-runner-ip_v1-0-0.outputs.ipv4 }}/32" \
            -var="webapp_database_name=${{ vars.WEBAPP_DB_NAME }}" \
            -var="webapp_db_master_username=${{ secrets.WEBAPP_DB_MASTER_USERNAME }}" \
            -var="webapp_db_master_password=${{ secrets.WEBAPP_DB_MASTER_PASSWORD }}"
        continue-on-error: false
      # Apply an execution plan for Terraform.
      - name: Step - Terraform plan applying 🚧
        run: terraform apply -auto-approve -input=false webapp.tfplan
      # Deploy any changes in the changelog file that have not been deployed
      - name: Step - Liquibase Update Action 🛢
        if: ${{ inputs.apply-database-changes }}
        uses: ./.github/actions/liquibase-github-actions_update_v4.33.0
        with:
          changelogFile: "./postgresql/webapp_db/public/master.xml"
          url: "jdbc:postgresql://${{ secrets.WEBAPP_DB_MASTER_URL }}:5432/${{ secrets.WEBAPP_DB_NAME }}"
          defaultSchemaName: "public"
          driver: "org.postgresql.Driver"
          password: ${{ secrets.WEBAPP_DB_MASTER_PASSWORD }}
          rollbackOnError: true
          showSummary: "summary"
          showSummaryOutput: "console"
          username: ${{ secrets.WEBAPP_DB_MASTER_USERNAME }}
          classpath: "./postgresql/webapp_db/public"
      # Generates an execution plan for a `github_runner_to_pg_webapp_db_sg` module only.
      - name: Step - Terraform plan generation for specific module 📦
        run: terraform plan -input=false -out=webapp.tfplan
        continue-on-error: false
      # Apply an execution plan for Terraform.
      - name: Step - Terraform plan apply for for specific module 🚧
        run: terraform apply -auto-approve -input=false -target=module.github_runner_to_pg_webapp_db_sg.aws_security_group.generic
